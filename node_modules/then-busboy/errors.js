var FieldsLimitException, FilesLimitException, HttpException, PartsLimitException, RequestEntityTooLargeException, UnallowedMime,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = Object.prototype.hasOwnProperty;

HttpException = (function(superClass) {
  extend(HttpException, superClass);

  function HttpException(name, message, status, code) {
    this.name = name != null ? name : "HttpException";
    this.status = status != null ? status : 500;
    this.message = message != null ? message : "Internal Server Error";
    this.code = code != null ? code : "EHTTP_INTERNAL_SERVER_ERROR";
    Error.captureStackTrace(this, Error);
  }

  return HttpException;

})(Error);

RequestEntityTooLargeException = (function(superClass) {
  extend(RequestEntityTooLargeException, superClass);

  function RequestEntityTooLargeException(message) {
    RequestEntityTooLargeException.__super__.constructor.call(this, "RequestEntityTooLargeException", message != null ? message : "Request Entity Too Large", 413, "EHTTP_REQUEST_ENTITY_TOO_LARGE");
  }

  return RequestEntityTooLargeException;

})(HttpException);

PartsLimitException = (function(superClass) {
  extend(PartsLimitException, superClass);

  function PartsLimitException(message) {
    this.code = "EBUSBOY_PARTS_LIMIT";
    PartsLimitException.__super__.constructor.call(this, message);
  }

  return PartsLimitException;

})(RequestEntityTooLargeException);

FieldsLimitException = (function(superClass) {
  extend(FieldsLimitException, superClass);

  function FieldsLimitException(message) {
    this.code = "EBUSBOY_FIELDS_LIMIT";
    FieldsLimitException.__super__.constructor.call(this, message);
  }

  return FieldsLimitException;

})(RequestEntityTooLargeException);

FilesLimitException = (function(superClass) {
  extend(FilesLimitException, superClass);

  function FilesLimitException(message) {
    this.code = "EBUSBOY_FILES_LIMIT";
    FilesLimitException.__super__.constructor.call(this, message);
  }

  return FilesLimitException;

})(RequestEntityTooLargeException);

UnallowedMime = (function(superClass) {
  extend(UnallowedMime, superClass);

  function UnallowedMime(message) {
    UnallowedMime.__super__.constructor.call(this, "Unallowed Mime", message, 400, "EBUSBOY_UNALLOWED_MIME");
  }

  return UnallowedMime;

})(HttpException);

module.exports = {
  HttpException: HttpException,
  RequestEntityTooLargeException: RequestEntityTooLargeException,
  PartsLimitException: PartsLimitException,
  FieldsLimitException: FieldsLimitException,
  FilesLimitException: FilesLimitException,
  UnallowedMime: UnallowedMime
};

//# sourceMappingURL=errors.js.map
